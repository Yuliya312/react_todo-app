{"version":3,"sources":["components/NewTodo/NewTodo.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","App.js","index.js"],"names":["NewTodo","state","title","changeHandler","event","setState","target","value","addNewTodo","preventDefault","props","addTodo","id","uuidv4","completed","inputError","this","action","onSubmit","type","name","className","placeholder","onChange","Component","TodoItem","todo","onCheckboxChecked","onTodoDelete","cx","checked","htmlFor","onClick","TodoList","todos","deleteTodo","checkedTodo","map","key","filterButtons","all","active","TodosFilter","filterButtonsChosed","filterHandler","onClearCompleted","unDoneTodos","filter","length","Object","values","filterButton","href","selected","App","prevState","filterTodos","toggleAll","every","clearAllCompleted","storedTodos","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","filteredTodos","checkComplete","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45d19227.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class NewTodo extends Component {\n  state = {\n    title: '',\n  };\n\n  changeHandler = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  }\n\n  addNewTodo = (event) => {\n    event.preventDefault();\n    const { title } = this.state;\n\n    this.props.addTodo({\n      title,\n      id: uuidv4(),\n      completed: false,\n      inputError: false,\n    });\n    this.setState({\n      title: '',\n    });\n  };\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form action=\"\" onSubmit={this.addNewTodo}>\n        <input\n          type=\"text\"\n          name=\"new-todo\"\n          className=\"new-todo\"\n          placeholder=\"Enter new todo please\"\n          value={title}\n          onChange={this.changeHandler}\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nexport const TodoItem = (props) => {\n  const {\n    todo: {\n      id,\n      title,\n      completed,\n    },\n    onCheckboxChecked,\n    onTodoDelete,\n  } = props;\n\n  return (\n    <li\n      className={cx('', { completed })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={id}\n          onChange={event => onCheckboxChecked(event.target.checked)}\n          checked={completed}\n        />\n        <label\n          htmlFor={id}\n          className={cx('', { completed })}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => onTodoDelete(id)}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onCheckboxChecked: PropTypes.func.isRequired,\n  onTodoDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = (props) => {\n  const { todos, deleteTodo, checkedTodo } = props;\n\n  return (\n    <>\n      <ul className=\"todo-list\">\n        {todos.map((todo) => {\n          const { id } = todo;\n\n          return (\n            <TodoItem\n              todo={todo}\n              key={id}\n              onTodoDelete={deleteTodo}\n              onCheckboxChecked={checked => checkedTodo(id, checked)}\n            />\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n      ]),\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  checkedTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nexport const filterButtons = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n\nexport const TodosFilter = (props) => {\n  const {\n    todos,\n    filterButtonsChosed,\n    filterHandler,\n    onClearCompleted,\n  } = props;\n\n  const unDoneTodos = todos.filter(todo => todo.completed === false).length;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {unDoneTodos}\n        &nbsp;items left\n      </span>\n\n      <ul className=\"filters\">\n        {\n          Object.values(filterButtons).map(filterButton => (\n            <li key={filterButton}>\n              <a\n                href=\"#/\"\n                className={cx('', { selected: filterButtonsChosed })}\n                onClick={() => filterHandler(filterButton)}\n              >\n                {filterButton}\n              </a>\n            </li>\n          ))}\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={onClearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nTodosFilter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n      ]),\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n  filterButtonsChosed: PropTypes.string.isRequired,\n  filterHandler: PropTypes.func.isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport { NewTodo } from './components/NewTodo/NewTodo';\nimport { TodoList } from './components/TodoList/TodoList';\nimport {\n  TodosFilter, filterButtons,\n} from './components/TodosFilter/TodosFilter';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filterButtonsChosed: filterButtons.all,\n  };\n\n  componentDidMount() {\n    const storedTodos = localStorage.getItem('todos');\n\n    if (storedTodos) {\n      const todos = JSON.parse(storedTodos);\n\n      this.setState({ todos });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.todos !== this.state.todos) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  };\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n\n      todos: prevState.todos\n        .filter(todo => todo.id !== id),\n    }));\n  };\n\n  filterHandler = (filterButton) => {\n    this.setState({\n      filterButtonsChosed: filterButton,\n    });\n  }\n\n  filterTodos = () => {\n    const { filterButtonsChosed, todos } = this.state;\n\n    switch (filterButtonsChosed) {\n      case filterButtons.active:\n        return todos.filter(todo => !todo.completed);\n      case filterButtons.completed:\n        return todos.filter(todo => todo.completed);\n      case filterButtons.all:\n        return [...todos];\n      default:\n        return [...todos];\n    }\n  }\n\n  checkedTodo = (id, checked) => {\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              completed: checked,\n            };\n          }\n\n          return todo;\n        }),\n    }));\n  }\n\n  toggleAll = () => {\n    const { todos } = this.state;\n\n    this.setState((prevState) => {\n      if (todos.every(todo => todo.completed)) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: false,\n          })),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  }\n\n  clearAllCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    // console.log(state);\n    const { todos, filterButtonsChosed } = this.state;\n    const filteredTodos = this.filterTodos();\n    const checkComplete = todos.every(todo => todo.completed);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.toggleAll}\n            checked={checkComplete}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={filteredTodos}\n            deleteTodo={this.deleteTodo}\n            checkedTodo={this.checkedTodo}\n          />\n        </section>\n        <TodosFilter\n          filterButtonsChosed={filterButtonsChosed}\n          todos={this.state.todos}\n          filterHandler={this.filterHandler}\n          onClearCompleted={this.clearAllCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}