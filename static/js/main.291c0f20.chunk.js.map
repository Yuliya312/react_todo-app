{"version":3,"sources":["components/NewTodo/NewTodo.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","App.js","index.js"],"names":["NewTodo","state","title","changeHandler","event","setState","target","value","enterHandler","key","trim","length","props","addTodo","id","uuidv4","completed","inputError","this","type","name","className","placeholder","onChange","onKeyDown","Component","TodoItem","todo","onCheckboxChecked","onTodoDelete","checked","htmlFor","onClick","TodoList","todos","deleteTodo","checkedTodo","map","filterButtons","all","active","TodosFilter","filterButtonsChosed","filterHandler","onClearCompleted","unDoneTodos","filter","Object","values","filterButton","href","App","prevState","filterTodos","toggleAll","every","clearAllCompleted","storedTodos","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","filteredTodos","checkComplete","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.291c0f20.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class NewTodo extends Component {\n  static propTypes = {\n    addTodo: PropTypes.func.isRequired,\n  };\n\n  state = {\n    title: '',\n  };\n\n  changeHandler = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  }\n\n  enterHandler = (event) => {\n    const { title } = this.state;\n\n    if (event.key === 'Enter' && title.trim().length >= 1) {\n      this.props.addTodo({\n        title: event.target.value,\n        id: uuidv4(),\n        completed: false,\n        inputError: false,\n      });\n      this.setState({\n        title: '',\n      });\n    }\n  };\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <input\n        type=\"text\"\n        name=\"new-todo\"\n        className=\"new-todo\"\n        placeholder=\"Enter new todo please\"\n        value={title}\n        onChange={this.changeHandler}\n        onKeyDown={this.enterHandler}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = (props) => {\n  const {\n    todo: {\n      id,\n      title,\n      completed,\n    },\n    onCheckboxChecked,\n    onTodoDelete,\n  } = props;\n\n  return (\n    <li\n      className={completed ? 'completed' : ''}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={id}\n          onChange={event => onCheckboxChecked(event.target.checked)}\n          checked={completed}\n        />\n        <label\n          htmlFor={id}\n          className={completed ? 'checked' : ''}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => onTodoDelete(id)}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onCheckboxChecked: PropTypes.func.isRequired,\n  onTodoDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = (props) => {\n  const { todos, deleteTodo, checkedTodo } = props;\n\n  return (\n    <>\n      <ul className=\"todo-list\">\n        {todos.map((todo) => {\n          const { id } = todo;\n\n          return (\n            <TodoItem\n              todo={todo}\n              key={id}\n              onTodoDelete={deleteTodo}\n              onCheckboxChecked={checked => checkedTodo(id, checked)}\n            />\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n      ]),\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  checkedTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const filterButtons = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n\nexport const TodosFilter = (props) => {\n  const {\n    todos,\n    filterButtonsChosed,\n    filterHandler,\n    onClearCompleted,\n  } = props;\n\n  const unDoneTodos = todos.filter(todo => todo.completed === false).length;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {unDoneTodos}\n        &nbsp;items left\n      </span>\n\n      <ul className=\"filters\">\n        {\n          Object.values(filterButtons).map(filterButton => (\n            <li key={filterButton}>\n              <a\n                href=\"#/\"\n                className={\n                  filterButtonsChosed === filterButton ? 'selected' : ''\n                }\n                onClick={() => filterHandler(filterButton)}\n              >\n                {filterButton}\n              </a>\n            </li>\n          ))}\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={onClearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nTodosFilter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n      ]),\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n  filterButtonsChosed: PropTypes.string.isRequired,\n  filterHandler: PropTypes.func.isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport { NewTodo } from './components/NewTodo/NewTodo';\nimport { TodoList } from './components/TodoList/TodoList';\nimport {\n  TodosFilter, filterButtons,\n} from './components/TodosFilter/TodosFilter';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filterButtonsChosed: filterButtons.all,\n  };\n\n  componentDidMount() {\n    const storedTodos = localStorage.getItem('todos');\n\n    if (storedTodos) {\n      const todos = JSON.parse(storedTodos);\n\n      this.setState({ todos });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.todos !== this.state.todos) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  };\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n\n      todos: prevState.todos\n        .filter(todo => todo.id !== id),\n    }));\n  };\n\n  filterHandler = (filterButton) => {\n    this.setState({\n      filterButtonsChosed: filterButton,\n    });\n  }\n\n  filterTodos = () => {\n    const { filterButtonsChosed, todos } = this.state;\n\n    switch (filterButtonsChosed) {\n      case filterButtons.active:\n        return todos.filter(todo => !todo.completed);\n      case filterButtons.completed:\n        return todos.filter(todo => todo.completed);\n      case filterButtons.all:\n        return [...todos];\n      default:\n        return [...todos];\n    }\n  }\n\n  checkedTodo = (id, checked) => {\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              completed: checked,\n            };\n          }\n\n          return todo;\n        }),\n    }));\n  }\n\n  toggleAll = () => {\n    const { todos } = this.state;\n\n    this.setState((prevState) => {\n      if (todos.every(todo => todo.completed)) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: false,\n          })),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  }\n\n  clearAllCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    const { todos, filterButtonsChosed } = this.state;\n    const filteredTodos = this.filterTodos();\n    const checkComplete = todos.every(todo => todo.completed);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.toggleAll}\n            checked={checkComplete}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={filteredTodos}\n            deleteTodo={this.deleteTodo}\n            checkedTodo={this.checkedTodo}\n          />\n        </section>\n        <TodosFilter\n          filterButtonsChosed={filterButtonsChosed}\n          todos={this.state.todos}\n          filterHandler={this.filterHandler}\n          onClearCompleted={this.clearAllCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}